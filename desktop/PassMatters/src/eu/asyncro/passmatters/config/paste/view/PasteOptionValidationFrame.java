/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package eu.asyncro.passmatters.config.paste.view;

import eu.asyncro.passmatters.config.paste.controller.PasteOptionValidator;
import java.awt.AWTException;

/**
 * Frame with one text field used for string matching 
 * between application generated text and user's copied one. 
 * 
 * @author Milan
 */
public class PasteOptionValidationFrame extends javax.swing.JFrame {

    private PasteOptionValidator validator;
    
    /**
     * Creates new form PasteOptionValidationFrame
     */
    public PasteOptionValidationFrame() {
        initComponents();
        setLocationRelativeTo(null);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtPasted = new javax.swing.JTextField();
        lblValidating = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Paste Option Validation");

        lblValidating.setText("Validating pasted text...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPasted)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblValidating)
                        .addGap(0, 283, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtPasted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblValidating)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   /**
    * Shows this frame with focused text field and pasted text inside it.
    * @throws AWTException 
    */ 
    public void showFrame() throws AWTException {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                clearAll();
                setVisible(true);
                txtPasted.requestFocusInWindow();
                validator.pasteTextWithRecordedKeys();
            }
        });
    }

    /**
     * Sets validator for pasted text validation.
     * @param validator PasteOptionValidator 
     */
    public void setValidator(PasteOptionValidator validator) {
        this.validator = validator;
    }
    
    /**
     * Returns text that user copied and pasted in InputPasteoptionFrame.
     * @return String with pasted text.
     */
    public String getPastedText() {
        return txtPasted.getText();
    }
    
    /**
     * Clears text from text field on frame. 
     */
    private void clearAll() {
        txtPasted.setText(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblValidating;
    private javax.swing.JTextField txtPasted;
    // End of variables declaration//GEN-END:variables
 
}
