/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package eu.asyncro.passmatters.config.paste.view;

import eu.asyncro.passmatters.config.paste.controller.KeyEventRecorder;
import eu.asyncro.passmatters.config.paste.controller.PasteOptionValidator;
import eu.asyncro.passmatters.main.view.BaseFrame;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

/**
 * Frame class for copying generated text from first to
 * second text field. Used in paste keyboard shortcut configuration.
 * 
 * @author Milan
 */
public class InputPasteOptionFrame extends BaseFrame {

    private int keyCount = 0;
    private final KeyEventRecorder recorder = new KeyEventRecorder();
    private PasteOptionValidator validator;
    
    
    /**
     * Creates new form InputPasteOptionFrame
     */
    public InputPasteOptionFrame() {
        super();
        initComponents();
        addListeners();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCopyText = new javax.swing.JLabel();
        txtForCopy = new javax.swing.JTextField();
        txtForPaste = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Configure paste option");

        lblCopyText.setText("Copy this text to second field using your default keyboard shortcut for copy/paste.");

        txtForCopy.setText("VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblCopyText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtForCopy)
                    .addComponent(txtForPaste))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCopyText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtForCopy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtForPaste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * Shows this frame.
     * @param copyString String which is shown in first (upper) text field. 
     */
    public void showFrame(final String copyString) {
        java.awt.EventQueue.invokeLater(new Runnable() {          
            @Override
            public void run() {
                setCopyString(copyString);
                setVisible(true);
            }
        });
    }
    
    /**
     * Adds appropriate listeners to frame components.
     */
    private void addListeners() {
        txtForPaste.addKeyListener(new KeyAdapter() {

            @Override
            public void keyReleased(KeyEvent e) {
                super.keyReleased(e);
                keyCount--;
                recorder.addKeyEventInfo(e, KeyEvent.KEY_RELEASED);
                if(0 == keyCount) {
                    dispose();
                    validator.startPasteValidation(recorder);
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                super.keyPressed(e); 
                keyCount++;
                recorder.addKeyEventInfo(e, KeyEvent.KEY_PRESSED);
            }
            
        });
    }

    /**
     * Sets validator for pasted text validation.
     * @param validator PasteOptionValidator 
     */
    public void setValidator(PasteOptionValidator validator) {
        this.validator = validator;
    }
    
    /**
     * Sets the string that user needs to copy from
     * first to second text field. 
     * @param copyString String to be copied
     */
    public void setCopyString(String copyString) {
        txtForCopy.setText(copyString);
    }
    
    /**
     * Clears all text fields in frame.
     */
    public void clearAll() {
        txtForCopy.setText(null);
        txtForPaste.setText(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblCopyText;
    private javax.swing.JTextField txtForCopy;
    private javax.swing.JTextField txtForPaste;
    // End of variables declaration//GEN-END:variables

    
}
